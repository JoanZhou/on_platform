"""
Django settings for on project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'h6a7f@uq5fshj%w^8n=tbrsawpj_^n99c2i*w9%tn)4jr%15-h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

HOST = 'http://wechat.onmytarget.cn'

ALLOWED_HOSTS = [
    '119.29.64.172',
    'localhost',
    'wechat.onmytarget.cn',
    '219.239.227.221',
    '115.159.53.105',
    '*',
    '127.0.0.1',
    '183.16.192.177'
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'gunicorn',
    'on',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'on.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, '../templates/'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'on.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "../static"),
    '/var/www/static/',
]

# Django REST framework

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)s %(message)s',
        },
        'standard': {
            'format': '%(levelname)s %(asctime)s %(message)s',
        },
    },
    'handlers': {
        'errorhandler': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': 'G:\\weblog\\error.log'
            # 'filename': '/home/ubuntu/weblog/error.log',
        },
        'infohandler': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': 'G:\\weblog\\info.log'
            # 'filename': '/home/ubuntu/weblog/info.log',
        },
        'moneyhandler': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': 'G:\\weblog\\money.log'
            # 'filename': '/home/ubuntu/weblog/money.log',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['errorhandler'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django': {
            'handlers': ['errorhandler'],
            'level': 'DEBUG',
            'propagate': True
        },
        'app': {
            'handlers': ['infohandler'],
            'level': 'INFO'
        },
        'money': {
            'handlers': ['moneyhandler'],
            'level': 'DEBUG',
            'propagate': True
        }
    },
}

AVATAR_ROOT = '/static/avatar/'

AVATAR_DIR = os.path.join(BASE_DIR, "../static/avatar")

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
